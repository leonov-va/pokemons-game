[{"D:\\OpenServer\\domains\\zar-marathon\\src\\index.js":"1","D:\\OpenServer\\domains\\zar-marathon\\src\\service\\firebase.js":"2","D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\NotFound\\index.js":"3","D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\ContactPage\\index.js":"4","D:\\OpenServer\\domains\\zar-marathon\\src\\components\\Footer\\index.js":"5","D:\\OpenServer\\domains\\zar-marathon\\src\\context\\firebaseContext.js":"6","D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\Game\\routes\\Board\\index.js":"7","D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\Game\\routes\\Board\\component\\PlayerBoard\\index.js":"8","D:\\OpenServer\\domains\\zar-marathon\\src\\components\\PokemonCard\\index.js":"9"},{"size":312,"mtime":1612597789635,"results":"10","hashOfConfig":"11"},{"size":1274,"mtime":1613290742940,"results":"12","hashOfConfig":"11"},{"size":110,"mtime":1612597789661,"results":"13","hashOfConfig":"11"},{"size":189,"mtime":1613290742915,"results":"14","hashOfConfig":"11"},{"size":262,"mtime":1612114998586,"results":"15","hashOfConfig":"11"},{"size":87,"mtime":1613290742912,"results":"16","hashOfConfig":"11"},{"size":4744,"mtime":1613296582367,"results":"17","hashOfConfig":"11"},{"size":1144,"mtime":1613295124447,"results":"18","hashOfConfig":"11"},{"size":1880,"mtime":1613296129292,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"109rmmo",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\OpenServer\\domains\\zar-marathon\\src\\index.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\service\\firebase.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\NotFound\\index.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\ContactPage\\index.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\components\\Footer\\index.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\context\\firebaseContext.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\Game\\routes\\Board\\index.js",["39","40","41"],"import { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PokemonContext } from '../../../../context/pokemonContext';\r\nimport PokemonCard from '../../../../components/PokemonCard';\r\nimport PlayerBoard from './component/PlayerBoard';\r\nimport s from './index.module.css';\r\n\r\nconst counterWin = (board, player1, player2) => {\r\n    let player1Count = player1.length;\r\n    let player2Count = player2.length;\r\n\r\n    board.forEach(item => {\r\n        if (item.card.possession === 'red') {\r\n            player2Count++;\r\n        }\r\n\r\n        if (item.card.possession === 'blue') {\r\n            player1Count++;\r\n        }\r\n    });\r\n    return [player1Count, player2Count]\r\n}\r\n\r\nfunction BoardPage () {\r\n    const { pokemons } = useContext(PokemonContext);\r\n    const [board, setBoard] = useState([]);\r\n    const [player1, setPlayer1] = useState(() => {\r\n        return Object.values(pokemons).map(item => ({\r\n            ...item,\r\n            possession: 'blue',\r\n        }))\r\n    });\r\n    const [player2, setPlayer2] = useState([]);\r\n    const [choiceCard, setChoiceCard] = useState(null);\r\n    const [steps, setSteps] = useState(0);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(async () => {\r\n        const boardResponse = await fetch('https://reactmarathon-api.netlify.app/api/board');\r\n        const boardRequest = await boardResponse.json();\r\n\r\n        setBoard(boardRequest.data);\r\n\r\n        const player2Responce = await fetch('https://reactmarathon-api.netlify.app/api/create-player');\r\n        const player2Request = await player2Responce.json();\r\n        setPlayer2(() => {\r\n            return player2Request.data.map(item => ({\r\n                ...item,\r\n                possession: 'red',\r\n            }))\r\n        });\r\n    }, []);\r\n\r\n    // if (Object.keys(pokemons).length === 0) {\r\n    //     history.replace('/game');\r\n    // }\r\n\r\n    const handleClickBoardPlate = async (position) => {\r\n        console.log('position: ', position);\r\n        console.log('choiceCard: ', choiceCard);\r\n        if (choiceCard) {\r\n            const params = {\r\n                position,\r\n                card: choiceCard,\r\n                board\r\n            }\r\n            const res = await fetch('https://reactmarathon-api.netlify.app/api/players-turn', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(params),\r\n            });\r\n            const request = await res.json();\r\n\r\n            if (choiceCard.player === 1) {\r\n                setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\r\n            }\r\n            if (choiceCard.player === 2) {\r\n                setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\r\n            }\r\n\r\n            setBoard(request.data);\r\n            setSteps(prevState => {\r\n                const count = prevState + 1;\r\n                return count;\r\n            })\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (steps === 9) {\r\n            const [count1, count2] = counterWin(board, player1, player2);\r\n\r\n            if (count1 > count2) {\r\n                alert('Win');\r\n            } else if (count1 < count2) {\r\n                alert('Lose');\r\n            } else {\r\n                alert('Draw');\r\n            }\r\n        }\r\n    }, [steps])\r\n    \r\n    return (\r\n        <div className={s.root}>\r\n            <div className={s.playerOne}>\r\n                {\r\n                    <PlayerBoard\r\n                        player={1}\r\n                        cards={player1}\r\n                        onClickCard={(card) => setChoiceCard(card)}\r\n                    /> \r\n                }\r\n            </div>\r\n            <div className={s.board}>\r\n                {\r\n                    board.map(item => (\r\n                        <div \r\n                            key={item.position}\r\n                            className={s.boardPlate}\r\n                            onClick={() => !item.card && handleClickBoardPlate(item.position)} \r\n                        >\r\n                            {\r\n                                item.card && <PokemonCard {...item.card} isActive minimize />\r\n                            }\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className={s.playerTwo}>\r\n                {\r\n                  <PlayerBoard \r\n                    player={2}\r\n                    cards={player2} \r\n                    onClickCard={(card) => setChoiceCard(card)}  \r\n                  />  \r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardPage;","D:\\OpenServer\\domains\\zar-marathon\\src\\routes\\Game\\routes\\Board\\component\\PlayerBoard\\index.js",[],"D:\\OpenServer\\domains\\zar-marathon\\src\\components\\PokemonCard\\index.js",["42","43","44"],{"ruleId":"45","severity":1,"message":"46","line":37,"column":11,"nodeType":"47","messageId":"48","endLine":37,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":39,"column":15,"nodeType":"51","endLine":53,"endColumn":6},{"ruleId":"49","severity":1,"message":"52","line":104,"column":8,"nodeType":"53","endLine":104,"endColumn":15,"suggestions":"54"},{"ruleId":"45","severity":1,"message":"55","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":18},{"ruleId":"45","severity":1,"message":"56","line":1,"column":20,"nodeType":"47","messageId":"48","endLine":1,"endColumn":30},{"ruleId":"57","severity":1,"message":"58","line":19,"column":55,"nodeType":"59","messageId":"60","endLine":19,"endColumn":56},"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'board', 'player1', and 'player2'. Either include them or remove the dependency array.","ArrayExpression",["61"],"'useState' is defined but never used.","'useContext' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",{"desc":"62","fix":"63"},"Update the dependencies array to be: [board, player1, player2, steps]",{"range":"64","text":"65"},[3413,3420],"[board, player1, player2, steps]"]